const fs = require('fs');
const path = require('path');
const ignore = require('ignore');

const OUTPUT_FILENAME = '__copypasteforai.md';
const START_DIR = process.argv[2] || '.';
const MAX_SIZE = 1024 * 1024; // 1MB

const SKIP_EXTENSIONS = [
  '.png', '.jpg', '.jpeg', '.gif', '.svg',
  '.ico', '.exe', '.dll', '.zip', '.tar', '.gz',
  '.mp4', '.mp3', '.ogg', '.mov', '.pdf', '.webp',
  '.woff', '.woff2', '.ttf', '.eot', '.otf'
];

// Parse .gitignore patterns
function getIgnoreFilter(baseDir) {
  const ig = ignore();
  const gitignorePath = path.join(baseDir, '.gitignore');
  if (fs.existsSync(gitignorePath)) {
    const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
    ig.add(gitignoreContent.split(/\r?\n/));
  }
  // Always ignore output file
  ig.add(OUTPUT_FILENAME);
  return ig;
}

function listFiles(dir, base, ig) {
  let results = [];
  const list = fs.readdirSync(dir, { withFileTypes: true });
  for (let entry of list) {
    const relPath = path.relative(base, path.join(dir, entry.name));
    // Check .gitignore patterns (as paths relative to base)
    if (ig.ignores(relPath.replace(/\\/g, '/'))) continue;
    if (entry.isDirectory()) {
      results = results.concat(listFiles(path.join(dir, entry.name), base, ig));
    } else {
      results.push(relPath);
    }
  }
  return results;
}

function filesToMarkdown(files) {
  let md = `# Project File List\n\n`;
  md += `> Generated by AI copy-paste helper. For context, here are all files and their contents.\n\n`;
  for (let file of files) {
    md += `---\n\n`;
    md += `## \`${file}\`\n\n`;

    // Skip big or binary files
    const filePath = path.join(START_DIR, file);
    const ext = path.extname(file).toLowerCase();
    let stat;
    try {
      stat = fs.statSync(filePath);
    } catch (err) {
      md += `*(Could not access file)*\n\n`;
      continue;
    }

    if (stat.size > MAX_SIZE) {
      md += `*(File too large: ${(stat.size / 1024).toFixed(1)} KB, not included)*\n\n`;
      continue;
    }
    if (SKIP_EXTENSIONS.includes(ext)) {
      md += `*(File skipped: extension \`${ext}\` is not included)*\n\n`;
      continue;
    }

    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const codeBlockLang = ext.slice(1) || 'txt';
      md += `\`\`\`${codeBlockLang}\n${content}\n\`\`\`\n\n`;
    } catch (err) {
      md += `*(Could not read file as text)*\n\n`;
    }
  }
  md += `---\n`;
  return md;
}

(function main() {
  const ig = getIgnoreFilter(START_DIR);
  const files = listFiles(START_DIR, START_DIR, ig);
  const md = filesToMarkdown(files);
  fs.writeFileSync(path.join(START_DIR, OUTPUT_FILENAME), md, 'utf8');
  console.log(`Done! Output written to ${OUTPUT_FILENAME}`);
})();
