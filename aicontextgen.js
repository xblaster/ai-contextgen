/*
 * AI-ContextGen
 * Automatically generates a Markdown snapshot of your codebase,
 * respecting .gitignore and skipping large/binary files.
 */

const fs = require('fs');
const path = require('path');
const ignore = require('ignore');

// Output filename for the generated context
const OUTPUT_FILENAME = '__aicontextgen.md';
// Starting directory (default to current)
const START_DIR = process.argv[2] || '.';
// Maximum file size to include (1MB)
const MAX_SIZE = 1024 * 1024;

// Extensions to skip (binary or large-format files)
const SKIP_EXTENSIONS = [
  '.png', '.jpg', '.jpeg', '.gif', '.svg',
  '.ico', '.exe', '.dll', '.zip', '.tar', '.gz',
  '.mp4', '.mp3', '.ogg', '.mov', '.pdf', '.webp',
  '.woff', '.woff2', '.ttf', '.eot', '.otf'
];

// Build an ignore filter based on .gitignore and always skip the output file
function getIgnoreFilter(baseDir) {
  const ig = ignore();
  const gitignorePath = path.join(baseDir, '.gitignore');
  if (fs.existsSync(gitignorePath)) {
    const content = fs.readFileSync(gitignorePath, 'utf8');
    ig.add(content.split(/\r?\n/));
  }
  ig.add(OUTPUT_FILENAME);
  return ig;
}

// Recursively list files, applying the ignore filter
function listFiles(dir, base, ig) {
  let results = [];
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    const relPath = path.relative(base, fullPath);
    if (ig.ignores(relPath.replace(/\\/g, '/'))) continue;
    if (entry.isDirectory()) {
      results = results.concat(listFiles(fullPath, base, ig));
    } else {
      results.push(relPath);
    }
  }
  return results;
}

// Generate Markdown listing all files and their contents
function filesToMarkdown(files) {
  let md = `# AI-ContextGen Snapshot\n\n`;
  md += `> Generated by AI-ContextGen. Below is the full project context.\n\n`;

  for (const file of files) {
    md += `---\n\n`;
    md += `## \`${file}\`\n\n`;

    const filePath = path.join(START_DIR, file);
    const ext = path.extname(file).toLowerCase();
    let stats;
    try {
      stats = fs.statSync(filePath);
    } catch {
      md += `*(Unable to access file)*\n\n`;
      continue;
    }

    if (stats.size > MAX_SIZE) {
      md += `*(Skipped: file too large - ${(stats.size/1024).toFixed(1)} KB)*\n\n`;
      continue;
    }
    if (SKIP_EXTENSIONS.includes(ext)) {
      md += `*(Skipped: extension \\`${ext}\\` not supported)*\n\n`;
      continue;
    }

    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const lang = ext.slice(1) || 'txt';
      md += `\\`\\`\\`${lang}\n${content}\n\\`\\`\\`\n\n`;
    } catch {
      md += `*(Unable to read file as text)*\n\n`;
    }
  }

  md += `---\n`;
  return md;
}

// Main execution
(function main() {
  const ig = getIgnoreFilter(START_DIR);
  const files = listFiles(START_DIR, START_DIR, ig);
  const markdown = filesToMarkdown(files);
  fs.writeFileSync(path.join(START_DIR, OUTPUT_FILENAME), markdown, 'utf8');
  console.log(`AI-ContextGen: Snapshot saved to ${OUTPUT_FILENAME}`);
})();
