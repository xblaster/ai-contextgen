const fs = require('fs');
const path = require('path');

function filesToMarkdown(startDir, files, options, bar) {
  const MAX_SIZE = options.maxSize || 1024 * 1024;
  const SKIP_EXTENSIONS = options.skipExtensions || [];

  let md = `# AI-ContextGen Snapshot\n\n`;
  md += `> Generated by AI-ContextGen. Below is the full project context.\n\n`;

  for (const file of files) {
    md += `---\n\n`;
    md += `## \`${file}\`\n\n`;

    const filePath = path.join(startDir, file);
    const ext = path.extname(file).toLowerCase();
    let stats;
    try {
      stats = fs.statSync(filePath);
    } catch {
      md += `*(Unable to access file)*\n\n`;
      if (bar && typeof bar.increment === 'function') bar.increment();
      continue;
    }

    if (stats.size > MAX_SIZE) {
      md += `*(Skipped: file too large - ${(stats.size / 1024).toFixed(1)} KB)*\n\n`;
      if (bar && typeof bar.increment === 'function') bar.increment();
      continue;
    }
    if (SKIP_EXTENSIONS.includes(ext)) {
      md += `*(Skipped: extension \`${ext}\` not supported)*\n\n`;
      if (bar && typeof bar.increment === 'function') bar.increment();
      continue;
    }

    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const lang = ext.slice(1) || 'txt';
      md += `\`\`\`${lang}\n${content}\n\`\`\`\n\n`;
    } catch {
      md += `*(Unable to read file as text)*\n\n`;
    }
    if (bar && typeof bar.increment === 'function') bar.increment();
  }

  md += `---\n`;
  return md;
}

module.exports = filesToMarkdown;
